C51 COMPILER V9.60.0.0   DESCRIPTORS                                                       04/23/2021 07:39:25 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE DESCRIPTORS
OBJECT MODULE PLACED IN .\src\descriptors.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\glen\Si
                    -mplicityStudio\v4_workspace\EFM8UB2_HID_VendorDefined_Knobs_01\src\descriptors.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE
                    -) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\glen\SimplicityStudio\v4_
                    -workspace\EFM8UB2_HID_VendorDefined_Knobs_01\inc;C:\Users\glen\SimplicityStudio\v4_workspace\EFM8UB2_HID_VendorDefined_K
                    -nobs_01\inc\config;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//kits/EFM8UB2_SLSTK2001A/config;C:/Sili
                    -conLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Lib/efm8_assert;C:/SiliconLabs/SimplicityStudio/v4/developer/sdk
                    -s/8051/v4.1.7//Lib/efm8_usb/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Device/EFM8UB2/peripheral
                    -_driver/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//kits/common/bsp;C:/SiliconLabs/SimplicityStud
                    -io/v4/developer/sdks/8051/v4.1.7//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7
                    -//Device/EFM8UB2/inc) REGFILE(EFM8UB2_HID_VendorDefined_Knobs_01.ORC) PRINT(.\src\descriptors.lst) COND PAGEWIDTH(120) P
                    -AGELENGTH(65) OBJECT(.\src\descriptors.OBJ)

line level    source

   1          /**************************************************************************//**
   2           * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3           *
   4           * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5           *****************************************************************************/
   6          
   7          //=============================================================================
   8          // src/descriptors.c: generated by Hardware Configurator
   9          //
  10          // This file is only generated if it does not exist. Modifications in this file
  11          // will persist even if Configurator generates code. To refresh this file,
  12          // you must first delete it and then regenerate code.
  13          //=============================================================================
  14          
  15          //-----------------------------------------------------------------------------
  16          // Includes
  17          //-----------------------------------------------------------------------------
  18          #include <si_toolchain.h>
  19          #include <endian.h>
  20          #include <stdlib.h>
  21          #include <string.h>
  22          #include <efm8_usb.h>
  23          #include "descriptors.h"
  24          
  25          
  26          #ifdef __cplusplus
              extern "C" {
              #endif
  29          
  30          // Device Descriptor
  31          SI_SEGMENT_VARIABLE(deviceDesc[],
  33                              const USB_DeviceDescriptor_TypeDef,
  33                              SI_SEG_CODE) =
  34          {
  35            USB_DEVICE_DESCSIZE,             // bLength
  36            USB_DEVICE_DESCRIPTOR,           // bDescriptorType
  37            htole16(0x0200),                 // bcdUSB
  38            0,                               // bDeviceClass
  39            0,                               // bDeviceSubClass
  40            0,                               // bDeviceProtocol
  41            64,                              // bMaxPacketSize
  42            USB_VENDOR_ID,                   // idVendor
  43            USB_PRODUCT_ID,                  // idProduct
  44            htole16(0x0100),                 // bcdDevice
  45            1,                               // iManufacturer
  46            2,                               // iProduct
C51 COMPILER V9.60.0.0   DESCRIPTORS                                                       04/23/2021 07:39:25 PAGE 2   

  47            3,                               // iSerialNumber
  48            1,                               // bNumConfigurations
  49          };
  50          
  51          
  52          // Configuration Descriptor
  53          SI_SEGMENT_VARIABLE(configDesc[],
  55                              const uint8_t,
  55                              SI_SEG_CODE) =
  56          {
  57            USB_CONFIG_DESCSIZE,             // bLength
  58            USB_CONFIG_DESCRIPTOR,           // bDescriptorType
  59            0x29,                            // wTotalLength(LSB)
  60            0x00,                            // wTotalLength(MSB)
  61            1,                               // bNumInterfaces
  62            1,                               // bConfigurationValue
  63            0,                               // iConfiguration
  64            CONFIG_DESC_BM_RESERVED_D7,      // bmAttrib: Bus powered
  65            CONFIG_DESC_MAXPOWER_mA(100),    // bMaxPower: 100 mA
  66          
  67            //Interface 0 Descriptor
  68            USB_INTERFACE_DESCSIZE,          // bLength
  69            USB_INTERFACE_DESCRIPTOR,        // bDescriptorType
  70            0,                               // bInterfaceNumber
  71            0,                               // bAlternateSetting
  72            2,                               // bNumEndpoints
  73            USB_CLASS_HID,                   // bInterfaceClass: HID (Human Interface Device)
  74            0,                               // bInterfaceSubClass
  75            0,                               // bInterfaceProtocol
  76            0,                               // iInterface
  77          
  78            // Class Descriptor (HID Descriptor)
  79            USB_HID_DESCSIZE,                // bLength
  80            USB_HID_DESCRIPTOR,              // bLength
  81            0x11,                            // bcdHID (LSB)
  82            0x01,                            // bcdHID (MSB)
  83            0,                               // bCountryCode
  84            1,                               // bNumDescriptors
  85            USB_HID_REPORT_DESCRIPTOR,       // bDescriptorType
  86            sizeof( ReportDescriptor0 ),     // wDescriptorLength(LSB)
  87            sizeof( ReportDescriptor0 )>>8,    // wDescriptorLength(MSB)
  88          
  89            // Endpoint 1 IN Descriptor
  90            USB_ENDPOINT_DESCSIZE,           // bLength
  91            USB_ENDPOINT_DESCRIPTOR,         // bDescriptorType
  92            0x81,                            // bEndpointAddress
  93            USB_EPTYPE_INTR,                 // bAttrib
  94            0x40,                            // wMaxPacketSize (LSB)
  95            0x00,                            // wMaxPacketSize (MSB)
  96            1,                               // bInterval
  97          
  98            // Endpoint 1 OUT Descriptor
  99            USB_ENDPOINT_DESCSIZE,           // bLength
 100            USB_ENDPOINT_DESCRIPTOR,         // bDescriptorType
 101            0x01,                            // bEndpointAddress
 102            USB_EPTYPE_INTR,                 // bAttrib
 103            0x40,                            // wMaxPacketSize (LSB)
 104            0x00,                            // wMaxPacketSize (MSB)
 105            1,                               // bInterval
 106          };
 107          
 108          // report 1: in report get key data, 5 bytes
 109          // report 2: out report set lamps, 13 bytes
C51 COMPILER V9.60.0.0   DESCRIPTORS                                                       04/23/2021 07:39:25 PAGE 3   

 110          
 111          // HID Report Descriptor for Interface 0
 112          SI_SEGMENT_VARIABLE(ReportDescriptor0[38],
 114                              const uint8_t,
 114                              SI_SEG_CODE) =
 115          {
 116          
 117                          0x06, 0x00, 0xFF,  // Usage Page (Vendor Defined 0xFF00)
 118                          0x09, 0x01,        // Usage (0x01)
 119                          0xA1, 0x01,        // Collection (Application)
 120          
 121                          0x85, 0x01,        //   Report ID (1)
 122                          0x95, 0x06,        //   Report Count (6)
 123                          0x75, 0x08,        //   Report Size (8)
 124                          0x26, 0xFF, 0x00,  //   Logical Maximum (255)
 125                          0x15, 0x00,        //   Logical Minimum (0)
 126                          0x09, 0x01,        //   Usage (0x01)
 127                          0x81, 0x02,        //   Input (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile
             -)
 128          
 129                          0x85, 0x02,        //   Report ID (2)
 130                          0x95, 0x01,        //   Report Count (1)
 131                          0x75, 0x08,        //   Report Size (8)
 132                          0x26, 0xFF, 0x00,  //   Logical Maximum (255)
 133                          0x15, 0x00,        //   Logical Minimum (0)
 134                          0x09, 0x01,        //   Usage (0x01)
 135                          0x91, 0x02,        //   Output (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
 136          
 137                          0xC0,              // End Collection
 138          
 139                          // 38 bytes
 140          };
 141          
 142          #define LANG_STRING   htole16( SLAB_USB_LANGUAGE )
 143          #define MFR_STRING                             'b','i','k','e','r','g','l','e','n','.','c','o','m','\0'
 144          #define MFR_SIZE                                14
 145          #define PROD_STRING                            'C','u','s','t','o','m',' ','U','S','B',' ','H','I','D',' '
             -,'D','e','v','i','c','e','\0'
 146          #define PROD_SIZE                               22
 147          #define SER_STRING                             '0','0','0','0','-','0','0','0','0','-','0','0','0','1','\0
             -'
 148          #define SER_SIZE                                15
 149          
 150          
 151          LANGID_STATIC_CONST_STRING_DESC( langDesc[], LANG_STRING);
 152          UTF16LE_PACKED_STATIC_CONST_STRING_DESC( mfrDesc[], MFR_STRING, MFR_SIZE );
 153          UTF16LE_PACKED_STATIC_CONST_STRING_DESC( prodDesc[], PROD_STRING, PROD_SIZE );
 154          UTF16LE_PACKED_STATIC_CONST_STRING_DESC( serDesc[], SER_STRING, SER_SIZE );
 155          
 156          //-----------------------------------------------------------------------------
 157          SI_SEGMENT_VARIABLE_SEGMENT_POINTER(myUsbStringTable_USEnglish[], static const USB_StringDescriptor_TypeDe
             -f, SI_SEG_GENERIC, const SI_SEG_CODE) = 
 158          {
 159            (SI_VARIABLE_SEGMENT_POINTER(, uint8_t, SI_SEG_CODE))langDesc,
 160            mfrDesc,
 161            prodDesc,
 162            serDesc,
 163          
 164          };
 165          
 166          //-----------------------------------------------------------------------------
 167          SI_SEGMENT_VARIABLE(initstruct,
 169                              const USBD_Init_TypeDef,
C51 COMPILER V9.60.0.0   DESCRIPTORS                                                       04/23/2021 07:39:25 PAGE 4   

 169                              SI_SEG_CODE) =
 170          {
 171            (SI_VARIABLE_SEGMENT_POINTER(, USB_DeviceDescriptor_TypeDef, SI_SEG_GENERIC))deviceDesc,              //
             - deviceDescriptor
 172            (SI_VARIABLE_SEGMENT_POINTER(, USB_ConfigurationDescriptor_TypeDef, SI_SEG_GENERIC))configDesc,       //
             - configDescriptor
 173            (SI_VARIABLE_SEGMENT_POINTER(, USB_StringTable_TypeDef, SI_SEG_GENERIC))myUsbStringTable_USEnglish,   //
             - stringDescriptors
 174            sizeof(myUsbStringTable_USEnglish) / sizeof(myUsbStringTable_USEnglish[0])                            //
             - numberOfStrings
 175          };
 176          
 177          #ifdef __cplusplus
              }
              #endif
 180          
 181          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =    183    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
