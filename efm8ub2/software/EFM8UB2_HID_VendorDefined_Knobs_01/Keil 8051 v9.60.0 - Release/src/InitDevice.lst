C51 COMPILER V9.60.0.0   INITDEVICE                                                        04/23/2021 07:39:25 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\glen\Si
                    -mplicityStudio\v4_workspace\EFM8UB2_HID_VendorDefined_Knobs_01\src\InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE)
                    - WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\glen\SimplicityStudio\v4_w
                    -orkspace\EFM8UB2_HID_VendorDefined_Knobs_01\inc;C:\Users\glen\SimplicityStudio\v4_workspace\EFM8UB2_HID_VendorDefined_Kn
                    -obs_01\inc\config;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//kits/EFM8UB2_SLSTK2001A/config;C:/Silic
                    -onLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Lib/efm8_assert;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks
                    -/8051/v4.1.7//Lib/efm8_usb/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Device/EFM8UB2/peripheral_
                    -driver/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//kits/common/bsp;C:/SiliconLabs/SimplicityStudi
                    -o/v4/developer/sdks/8051/v4.1.7//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7/
                    -/Device/EFM8UB2/inc) REGFILE(EFM8UB2_HID_VendorDefined_Knobs_01.ORC) PRINT(.\src\InitDevice.lst) COND PAGEWIDTH(120) PAG
                    -ELENGTH(65) OBJECT(.\src\InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8UB2_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          
  17          // $[Library Includes]
  18          #include "efm8_usb.h"
  19          #include "descriptors.h"
  20          // [Library Includes]$
  21          
  22          //==============================================================================
  23          // enter_DefaultMode_from_RESET
  24          //==============================================================================
  25          extern void enter_DefaultMode_from_RESET(void) {
  26   1              // $[Config Calls]
  27   1              // Save the SFRPAGE
  28   1              uint8_t SFRPAGE_save = SFRPAGE;
  29   1              PCA_0_enter_DefaultMode_from_RESET();
  30   1              PCACH_0_enter_DefaultMode_from_RESET();
  31   1              PCACH_1_enter_DefaultMode_from_RESET();
  32   1              PCACH_4_enter_DefaultMode_from_RESET();
  33   1              PORTS_0_enter_DefaultMode_from_RESET();
  34   1              PORTS_1_enter_DefaultMode_from_RESET();
  35   1              PORTS_2_enter_DefaultMode_from_RESET();
  36   1              PORTS_3_enter_DefaultMode_from_RESET();
  37   1              PORTS_4_enter_DefaultMode_from_RESET();
  38   1              PBCFG_0_enter_DefaultMode_from_RESET();
  39   1              ADC_0_enter_DefaultMode_from_RESET();
  40   1              VREF_0_enter_DefaultMode_from_RESET();
  41   1              CLOCK_0_enter_DefaultMode_from_RESET();
  42   1              UARTE_1_enter_DefaultMode_from_RESET();
  43   1              INTERRUPT_0_enter_DefaultMode_from_RESET();
  44   1              USBLIB_0_enter_DefaultMode_from_RESET();
  45   1              // Restore the SFRPAGE
  46   1              SFRPAGE = SFRPAGE_save;
C51 COMPILER V9.60.0.0   INITDEVICE                                                        04/23/2021 07:39:25 PAGE 2   

  47   1              // [Config Calls]$
  48   1      
  49   1      
  50   1      }
  51          
  52          
  53          //================================================================================
  54          // PCA_0_enter_DefaultMode_from_RESET
  55          //================================================================================
  56          extern void PCA_0_enter_DefaultMode_from_RESET(void) {
  57   1              // $[PCA0MD - PCA Mode]
  58   1              /*
  59   1              // WDTE (Watchdog Timer Enable) = DISABLED (Disable Watchdog Timer.)
  60   1              // CPS (PCA Counter/Timer Pulse Select) = SYSCLK_DIV_12 (System clock
  61   1              //     divided by 12.)
  62   1              // CIDL (PCA Counter/Timer Idle Control) = NORMAL (PCA continues to
  63   1              //     function normally while the system controller is in Idle Mode.)
  64   1              // ECF (PCA Counter/Timer Overflow Interrupt Enable) = OVF_INT_DISABLED
  65   1              //     (Disable the CF interrupt.)
  66   1              // WDTE (Watchdog Timer Enable) = DISABLED (Disable Watchdog Timer.)
  67   1              // WDLCK (Watchdog Timer Lock) = UNLOCKED (Watchdog Timer Enable
  68   1              //     unlocked.)
  69   1              */
  70   1              SFRPAGE = 0x00;
  71   1              PCA0MD &= ~PCA0MD_WDTE__BMASK;
  72   1              PCA0MD = PCA0MD_CPS__SYSCLK_DIV_12 | PCA0MD_CIDL__NORMAL | PCA0MD_ECF__OVF_INT_DISABLED
  73   1                       | PCA0MD_WDTE__DISABLED | PCA0MD_WDLCK__UNLOCKED;
  74   1              // [PCA0MD - PCA Mode]$
  75   1      
  76   1              // $[PCA0H - PCA Counter/Timer High Byte]
  77   1              // [PCA0H - PCA Counter/Timer High Byte]$
  78   1      
  79   1              // $[PCA0L - PCA Counter/Timer Low Byte]
  80   1              // [PCA0L - PCA Counter/Timer Low Byte]$
  81   1      
  82   1              // $[PCA0CN0 - PCA Control 0]
  83   1              // [PCA0CN0 - PCA Control 0]$
  84   1      
  85   1      
  86   1      }
  87          
  88          //================================================================================
  89          // PCACH_0_enter_DefaultMode_from_RESET
  90          //================================================================================
  91          extern void PCACH_0_enter_DefaultMode_from_RESET(void) {
  92   1              uint8_t PCA0CN0_CR_save = PCA0CN0 & PCA0CN0_CR__BMASK;
  93   1              PCA0CN0 |= PCA0CN0_CR_save;
  94   1      
  95   1              // $[PCA0CPM0 - PCA Channel 0 Capture/Compare Mode]
  96   1              /*
  97   1              // CAPN (Channel 0 Capture Negative Function Enable) = DISABLED (Disable
  98   1              //     negative edge capture.)
  99   1              // ECCF (Channel 0 Capture/Compare Flag Interrupt Enable) = ENABLED
 100   1              //     (Enable a Capture/Compare Flag interrupt request when CCF0 is set.)
 101   1              // MAT (Channel 0 Match Function Enable) = DISABLED (Disable match
 102   1              //     function.)
 103   1              // PWM16 (Channel 0 16-bit Pulse Width Modulation Enable) = 8_BIT (8-bit
 104   1              //     PWM selected.)
 105   1              // CAPP (Channel 0 Capture Positive Function Enable) = ENABLED (Enable
 106   1              //     positive edge capture.)
 107   1              // ECOM (Channel 0 Comparator Function Enable) = DISABLED (Disable
 108   1              //     comparator function.)
 109   1              // PWM (Channel 0 Pulse Width Modulation Mode Enable) = DISABLED (Disable
C51 COMPILER V9.60.0.0   INITDEVICE                                                        04/23/2021 07:39:25 PAGE 3   

 110   1              //     PWM function.)
 111   1              // TOG (Channel 0 Toggle Function Enable) = DISABLED (Disable toggle
 112   1              //     function.)
 113   1              */
 114   1              PCA0CPM0 = PCA0CPM0_CAPN__DISABLED | PCA0CPM0_ECCF__ENABLED | PCA0CPM0_MAT__DISABLED
 115   1                       | PCA0CPM0_PWM16__8_BIT | PCA0CPM0_CAPP__ENABLED | PCA0CPM0_ECOM__DISABLED
 116   1                       | PCA0CPM0_PWM__DISABLED | PCA0CPM0_TOG__DISABLED;
 117   1              // [PCA0CPM0 - PCA Channel 0 Capture/Compare Mode]$
 118   1      
 119   1              // $[PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]
 120   1              // [PCA0CPL0 - PCA Channel 0 Capture Module Low Byte]$
 121   1      
 122   1              // $[PCA0CPH0 - PCA Channel 0 Capture Module High Byte]
 123   1              // [PCA0CPH0 - PCA Channel 0 Capture Module High Byte]$
 124   1      
 125   1      
 126   1      }
 127          
 128          //================================================================================
 129          // PCACH_1_enter_DefaultMode_from_RESET
 130          //================================================================================
 131          extern void PCACH_1_enter_DefaultMode_from_RESET(void) {
 132   1              uint8_t PCA0CN0_CR_save = PCA0CN0 & PCA0CN0_CR__BMASK;
 133   1              PCA0CN0 |= PCA0CN0_CR_save;
 134   1      
 135   1              // $[PCA0CPM1 - PCA Channel 1 Capture/Compare Mode]
 136   1              /*
 137   1              // CAPN (Channel 1 Capture Negative Function Enable) = DISABLED (Disable
 138   1              //     negative edge capture.)
 139   1              // ECCF (Channel 1 Capture/Compare Flag Interrupt Enable) = ENABLED
 140   1              //     (Enable a Capture/Compare Flag interrupt request when CCF1 is set.)
 141   1              // MAT (Channel 1 Match Function Enable) = DISABLED (Disable match
 142   1              //     function.)
 143   1              // PWM16 (Channel 1 16-bit Pulse Width Modulation Enable) = 8_BIT (8-bit
 144   1              //     PWM selected.)
 145   1              // CAPP (Channel 1 Capture Positive Function Enable) = ENABLED (Enable
 146   1              //     positive edge capture.)
 147   1              // ECOM (Channel 1 Comparator Function Enable) = DISABLED (Disable
 148   1              //     comparator function.)
 149   1              // PWM (Channel 1 Pulse Width Modulation Mode Enable) = DISABLED (Disable
 150   1              //     PWM function.)
 151   1              // TOG (Channel 1 Toggle Function Enable) = DISABLED (Disable toggle
 152   1              //     function.)
 153   1              */
 154   1              PCA0CPM1 = PCA0CPM1_CAPN__DISABLED | PCA0CPM1_ECCF__ENABLED | PCA0CPM1_MAT__DISABLED
 155   1                       | PCA0CPM1_PWM16__8_BIT | PCA0CPM1_CAPP__ENABLED | PCA0CPM1_ECOM__DISABLED
 156   1                       | PCA0CPM1_PWM__DISABLED | PCA0CPM1_TOG__DISABLED;
 157   1              // [PCA0CPM1 - PCA Channel 1 Capture/Compare Mode]$
 158   1      
 159   1              // $[PCA0CPL1 - PCA Channel 1 Capture Module Low Byte]
 160   1              // [PCA0CPL1 - PCA Channel 1 Capture Module Low Byte]$
 161   1      
 162   1              // $[PCA0CPH1 - PCA Channel 1 Capture Module High Byte]
 163   1              // [PCA0CPH1 - PCA Channel 1 Capture Module High Byte]$
 164   1      
 165   1      
 166   1      }
 167          
 168          //================================================================================
 169          // PORTS_0_enter_DefaultMode_from_RESET
 170          //================================================================================
 171          extern void PORTS_0_enter_DefaultMode_from_RESET (void)
 172          {
C51 COMPILER V9.60.0.0   INITDEVICE                                                        04/23/2021 07:39:25 PAGE 4   

 173   1              // configure all port 0 pins as digital push-pull outputs and set them low
 174   1              // except P0.6 which is the LED which is set to open drain and high.
 175   1              P0MDIN  = 0xFF; // all digital not analog
 176   1              P0MDOUT = 0x00; // all open drain
 177   1              P0      = 0xFF; // all high
 178   1      
 179   1              // crossbar skips all port 0 pins
 180   1              P0SKIP  = 0xff;
 181   1      }
 182          
 183          //================================================================================
 184          // PORTS_1_enter_DefaultMode_from_RESET
 185          //================================================================================
 186          extern void PORTS_1_enter_DefaultMode_from_RESET(void)
 187          {
 188   1              // P1.0 is UART TXD -- push pull
 189   1              // P1.1 is UART RXD -- open drain
 190   1      
 191   1              // configure all port 1 pins as digital push-pull outputs and set them low
 192   1              P1MDIN  = 0xFF; // all digital not analog
 193   1              P1MDOUT = 0x01; // all open drain except TXD
 194   1              P1      = 0xFF; // all high
 195   1      
 196   1              // crossbar skips all port 1 pins except P1.0 and P1.1
 197   1              P1SKIP  = 0xfc;
 198   1      }
 199          
 200          //================================================================================
 201          // PORTS_2_enter_DefaultMode_from_RESET
 202          //================================================================================
 203          extern void PORTS_2_enter_DefaultMode_from_RESET(void)
 204          {
 205   1              // configure all port 2 pins as digital push-pull outputs
 206   1              // set unused bits low, /WR & /RD high, A9:A8 low
 207   1              P2MDIN  = 0xFF;  // all digital not analog
 208   1              P2MDOUT = 0x00;  // all open drain
 209   1              P2      = 0xFF;  // all high
 210   1      
 211   1              // crossbar skips all port 2 pins
 212   1              P2SKIP  = 0xff;
 213   1      }
 214          
 215          //================================================================================
 216          // PORTS_3_enter_DefaultMode_from_RESET
 217          //================================================================================
 218          extern void PORTS_3_enter_DefaultMode_from_RESET(void)
 219          {
 220   1              P3MDIN  = 0xFF;  // all digital not analog
 221   1              P3MDOUT = 0x00;  // all open drain
 222   1              P3      = 0xFF;  // all high
 223   1      
 224   1              // crossbar skip all port 3 pins
 225   1              P3SKIP  = 0xff;
 226   1      }
 227          
 228          //================================================================================
 229          // PORTS_4_enter_DefaultMode_from_RESET
 230          //================================================================================
 231          extern void PORTS_4_enter_DefaultMode_from_RESET(void)
 232          {
 233   1              P4MDIN  = 0xFF;  // all digital not analog
 234   1              P4MDOUT = 0x00;  // all open drain
 235   1              P4      = 0xFF;  // all high
C51 COMPILER V9.60.0.0   INITDEVICE                                                        04/23/2021 07:39:25 PAGE 5   

 236   1      }
 237          
 238          //================================================================================
 239          // PBCFG_0_enter_DefaultMode_from_RESET
 240          //================================================================================
 241          extern void PBCFG_0_enter_DefaultMode_from_RESET(void) {
 242   1              // $[XBR1 - Port I/O Crossbar 1]
 243   1              /*
 244   1              // WEAKPUD (Port I/O Weak Pullup Disable) = PULL_UPS_ENABLED (Weak
 245   1              //     Pullups enabled (except for Ports whose I/O are configured for analog
 246   1              //     mode).)
 247   1              // XBARE (Crossbar Enable) = ENABLED (Crossbar enabled.)
 248   1              // PCA0ME (PCA Module I/O Enable) = CEX0_CEX1 (CEX0, CEX1 routed to Port
 249   1              //     pins.)
 250   1              // ECIE (PCA0 External Counter Input Enable) = DISABLED (ECI unavailable
 251   1              //     at Port pin.)
 252   1              // T0E (T0 Enable) = DISABLED (T0 unavailable at Port pin.)
 253   1              // T1E (T1 Enable) = DISABLED (T1 unavailable at Port pin.)
 254   1              */
 255   1              XBR1 = XBR1_WEAKPUD__PULL_UPS_ENABLED | XBR1_XBARE__ENABLED | XBR1_PCA0ME__DISABLED
 256   1                       | XBR1_ECIE__DISABLED | XBR1_T0E__DISABLED | XBR1_T1E__DISABLED;
 257   1              // [XBR1 - Port I/O Crossbar 1]$
 258   1      
 259   1              // $[XBR0 - Port I/O Crossbar 0]
 260   1              // [XBR0 - Port I/O Crossbar 0]$
 261   1      
 262   1              // $[XBR2 - Port I/O Crossbar 2]
 263   1              XBR2 = XBR2_URT1E__ENABLED | XBR2_SMB1E__DISABLED;
 264   1              // [XBR2 - Port I/O Crossbar 2]$
 265   1      
 266   1      
 267   1      }
 268          
 269          //================================================================================
 270          // CLOCK_0_enter_DefaultMode_from_RESET
 271          //================================================================================
 272          extern void CLOCK_0_enter_DefaultMode_from_RESET(void) {
 273   1              // $[CLKSEL - Clock Select]
 274   1              /*
 275   1              // CLKSL (System Clock Source Select Bits) = HFOSC (Clock (SYSCLK)
 276   1              //     derived from the Internal High-Frequency Oscillator.)
 277   1              // USBCLK (USB Clock Source Select Bits) = HFOSC (USB clock (USBCLK)
 278   1              //     derived from the Internal High-Frequency Oscillator.)
 279   1              // OUTCLK (Crossbar Clock Out Select) = SYSCLK (Enabling the Crossbar
 280   1              //     SYSCLK signal outputs SYSCLK.)
 281   1              */
 282   1              CLKSEL = CLKSEL_CLKSL__HFOSC | CLKSEL_USBCLK__HFOSC | CLKSEL_OUTCLK__SYSCLK;
 283   1              // [CLKSEL - Clock Select]$
 284   1      
 285   1      
 286   1      }
 287          
 288          //================================================================================
 289          // INTERRUPT_0_enter_DefaultMode_from_RESET
 290          //================================================================================
 291          extern void INTERRUPT_0_enter_DefaultMode_from_RESET(void) {
 292   1              // $[EIE1 - Extended Interrupt Enable 1]
 293   1              /*
 294   1              // EADC0 (ADC0 Conversion Complete Interrupt Enable) = DISABLED (Disable
 295   1              //     ADC0 Conversion Complete interrupt.)
 296   1              // EWADC0 (ADC0 Window Comparison Interrupt Enable) = DISABLED (Disable
 297   1              //     ADC0 Window Comparison interrupt.)
 298   1              // ECP0 (Comparator0 (CP0) Interrupt Enable) = DISABLED (Disable CP0
C51 COMPILER V9.60.0.0   INITDEVICE                                                        04/23/2021 07:39:25 PAGE 6   

 299   1              //     interrupts.)
 300   1              // ECP1 (Comparator1 (CP1) Interrupt Enable) = DISABLED (Disable CP1
 301   1              //     interrupts.)
 302   1              // EPCA0 (Programmable Counter Array (PCA0) Interrupt Enable) = ENABLED
 303   1              //     (Enable interrupt requests generated by PCA0.)
 304   1              // ESMB0 (SMBus (SMB0) Interrupt Enable) = DISABLED (Disable all SMB0
 305   1              //     interrupts.)
 306   1              // ET3 (Timer 3 Interrupt Enable) = DISABLED (Disable Timer 3
 307   1              //     interrupts.)
 308   1              // EUSB0 (USB (USB0) Interrupt Enable) = DISABLED (Disable all USB0
 309   1              //     interrupts.)
 310   1              */
 311   1              EIE1 = EIE1_EADC0__DISABLED | EIE1_EWADC0__DISABLED | EIE1_ECP0__DISABLED
 312   1                       | EIE1_ECP1__DISABLED | EIE1_EPCA0__DISABLED | EIE1_ESMB0__DISABLED
 313   1                       | EIE1_ET3__DISABLED | EIE1_EUSB0__DISABLED;
 314   1              // [EIE1 - Extended Interrupt Enable 1]$
 315   1      
 316   1              // $[EIP1 - Extended Interrupt Priority 1]
 317   1              // [EIP1 - Extended Interrupt Priority 1]$
 318   1      
 319   1              // $[EIE2 - Extended Interrupt Enable 2]
 320   1              /*
 321   1               // Disable all SMB1 interrupts
 322   1               // Disable Timer 4interrupts
 323   1               // Disable Timer 5 interrupts
 324   1               // Enable UART1 interrupt
 325   1               // Disable all VBUS interrupts
 326   1               */
 327   1              EIE2 = EIE2_ESMB1__DISABLED | EIE2_ET4__DISABLED | EIE2_ET5__DISABLED
 328   1                       | EIE2_ES1__ENABLED | EIE2_EVBUS__DISABLED;
 329   1              // [EIE2 - Extended Interrupt Enable 2]$
 330   1      
 331   1              // $[IE - Interrupt Enable]
 332   1              /*
 333   1              // EA (All Interrupts Enable) = ENABLED (Enable each interrupt according
 334   1              //     to its individual mask setting.)
 335   1              // EX0 (External Interrupt 0 Enable) = DISABLED (Disable external
 336   1              //     interrupt 0.)
 337   1              // EX1 (External Interrupt 1 Enable) = DISABLED (Disable external
 338   1              //     interrupt 1.)
 339   1              // ESPI0 (SPI0 Interrupt Enable) = DISABLED (Disable all SPI0
 340   1              //     interrupts.)
 341   1              // ET0 (Timer 0 Interrupt Enable) = DISABLED (Disable all Timer 0
 342   1              //     interrupt.)
 343   1              // ET1 (Timer 1 Interrupt Enable) = DISABLED (Disable all Timer 1
 344   1              //     interrupt.)
 345   1              // ET2 (Timer 2 Interrupt Enable) = DISABLED (Disable Timer 2 interrupt.)
 346   1              // ES0 (UART0 Interrupt Enable) = DISABLED (Disable UART0 interrupt.)
 347   1              */
 348   1              IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED | IE_ESPI0__DISABLED
 349   1                       | IE_ET0__DISABLED | IE_ET1__DISABLED | IE_ET2__DISABLED | IE_ES0__DISABLED;
 350   1              // [IE - Interrupt Enable]$
 351   1      
 352   1              // $[IP - Interrupt Priority]
 353   1              // [IP - Interrupt Priority]$
 354   1      
 355   1              // $[EIE2 - Extended Interrupt Enable 2]
 356   1              // [EIE2 - Extended Interrupt Enable 2]$
 357   1      
 358   1              // $[EIP2 - Extended Interrupt Priority 2]
 359   1              // [EIP2 - Extended Interrupt Priority 2]$
 360   1      
 361   1      
C51 COMPILER V9.60.0.0   INITDEVICE                                                        04/23/2021 07:39:25 PAGE 7   

 362   1      }
 363          
 364          //================================================================================
 365          // USBLIB_0_enter_DefaultMode_from_RESET
 366          //================================================================================
 367          extern void USBLIB_0_enter_DefaultMode_from_RESET(void) {
 368   1              // $[USBD Init]
 369   1              USBD_Init( &initstruct);
 370   1              // [USBD Init]$
 371   1      
 372   1      
 373   1      }
 374          
 375          
 376          extern void PCACH_4_enter_DefaultMode_from_RESET(void) {
 377   1              uint8_t PCA0CN0_CR_save = PCA0CN0 & PCA0CN0_CR__BMASK;
 378   1              PCA0CN0 |= PCA0CN0_CR_save;
 379   1      
 380   1              // $[PCA0CPM4 - PCA Channel 4 Capture/Compare Mode]
 381   1              /*
 382   1              // CAPN (Channel 4 Capture Negative Function Enable) = DISABLED (Disable
 383   1              //     negative edge capture.)
 384   1              // ECCF (Channel 4 Capture/Compare Flag Interrupt Enable) = DISABLED
 385   1              //     (Disable CCF4 interrupts.)
 386   1              // MAT (Channel 4 Match Function Enable) = ENABLED (Enable match
 387   1              //     function.)
 388   1              // PWM16 (Channel 4 16-bit Pulse Width Modulation Enable) = 8_BIT (8-bit
 389   1              //     PWM selected.)
 390   1              // CAPP (Channel 4 Capture Positive Function Enable) = DISABLED (Disable
 391   1              //     positive edge capture.)
 392   1              // ECOM (Channel 4 Comparator Function Enable) = DISABLED (Disable
 393   1              //     comparator function.)
 394   1              // PWM (Channel 4 Pulse Width Modulation Mode Enable) = DISABLED (Disable
 395   1              //     PWM function.)
 396   1              // TOG (Channel 4 Toggle Function Enable) = DISABLED (Disable toggle
 397   1              //     function.)
 398   1              */
 399   1              PCA0CPM4 = PCA0CPM4_CAPN__DISABLED | PCA0CPM4_ECCF__DISABLED | PCA0CPM4_MAT__ENABLED
 400   1                       | PCA0CPM4_PWM16__8_BIT | PCA0CPM4_CAPP__DISABLED | PCA0CPM4_ECOM__DISABLED
 401   1                       | PCA0CPM4_PWM__DISABLED | PCA0CPM4_TOG__DISABLED;
 402   1              // [PCA0CPM4 - PCA Channel 4 Capture/Compare Mode]$
 403   1      
 404   1              // $[PCA0CPL4 - PCA Channel 4 Capture Module Low Byte]
 405   1              // [PCA0CPL4 - PCA Channel 4 Capture Module Low Byte]$
 406   1      
 407   1              // $[PCA0CPH4 - PCA Channel 4 Capture Module High Byte]
 408   1              // [PCA0CPH4 - PCA Channel 4 Capture Module High Byte]$
 409   1      
 410   1      
 411   1      }
 412          
 413          extern void ADC_0_enter_DefaultMode_from_RESET(void)
 414          {
 415   1              // SAR = 48 / (1+7) = 6 MHz and right justified output
 416   1              ADC0CF = ADC0CF_ADLJST__RIGHT_JUSTIFIED | (0x07 << ADC0CF_ADSC__SHIFT);
 417   1      
 418   1              // negative input is ground (single-ended operation)
 419   1              AMX0N = AMX0N_AMX0N__GND;
 420   1      
 421   1              // positive input is ADC0P6 which is P3.0
 422   1              AMX0P = AMX0P_AMX0P__ADC0P6;
 423   1      
 424   1              // enable converter in delayed tracking mode, start conversion on write of ADBUSY
C51 COMPILER V9.60.0.0   INITDEVICE                                                        04/23/2021 07:39:25 PAGE 8   

 425   1              ADC0CN0 |= ADC0CN0_ADTM__TRACK_DELAYED;
 426   1              ADC0CN0 |= ADC0CN0_ADEN__ENABLED;
 427   1      }
 428          
 429          extern void VREF_0_enter_DefaultMode_from_RESET(void)
 430          {
 431   1              REF0CN = 0x08;
 432   1      }
 433          
 434          extern void UARTE_1_enter_DefaultMode_from_RESET (void)
 435          {
 436   1              SBCON1 = SBCON1_BREN__ENABLED | SBCON1_BPS__DIV_BY_1;
 437   1              SBRLH1 = (0xFF << SBRLH1_BRH__SHIFT);
 438   1              SBRLL1 = (0x10 << SBRLL1_BRL__SHIFT);
 439   1              SCON1 = 0x00;
 440   1              SMOD1 = 0x3D; // 0 01 1 11 0 1
 441   1      }
 442          
 443          
 444          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    222    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
