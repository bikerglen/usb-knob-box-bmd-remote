C51 COMPILER V9.60.0.0   MAIN                                                              04/23/2021 07:39:26 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\src\main.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\glen\Si
                    -mplicityStudio\v4_workspace\EFM8UB2_HID_VendorDefined_Knobs_01\src\main.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNI
                    -NGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\glen\SimplicityStudio\v4_workspa
                    -ce\EFM8UB2_HID_VendorDefined_Knobs_01\inc;C:\Users\glen\SimplicityStudio\v4_workspace\EFM8UB2_HID_VendorDefined_Knobs_01
                    -\inc\config;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//kits/EFM8UB2_SLSTK2001A/config;C:/SiliconLabs
                    -/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Lib/efm8_assert;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/
                    -v4.1.7//Lib/efm8_usb/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Device/EFM8UB2/peripheral_driver
                    -/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//kits/common/bsp;C:/SiliconLabs/SimplicityStudio/v4/d
                    -eveloper/sdks/8051/v4.1.7//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Devic
                    -e/EFM8UB2/inc) REGFILE(EFM8UB2_HID_VendorDefined_Knobs_01.ORC) PRINT(.\src\main.lst) COND PAGEWIDTH(120) PAGELENGTH(65) 
                    -OBJECT(.\src\main.OBJ)

line level    source

   1          //-----------------------------------------------------------------------------------------------
   2          // EFM8UB2 USB Controller Software for Sony BKS-R3209 Panels
   3          //
   4          
   5          //-----------------------------------------------------------------------------------------------
   6          // includes
   7          //
   8          
   9          #include "SI_EFM8UB2_Register_Enums.h"
  10          #include "efm8_usb.h"
  11          #include "descriptors.h"
  12          #include "idle.h"
  13          #include "InitDevice.h"
  14          #include "config.h"
  15          
  16          
  17          //-----------------------------------------------------------------------------------------------
  18          // defines
  19          //
  20          
  21          // device pins
  22          SI_SBIT(SW1_LED,  SFR_P2, 3); // SW1 LED -- top button on top of board
  23          SI_SBIT(SW2_LED,  SFR_P2, 2); // SW2 LED -- bottom button on top of board
  24          SI_SBIT(USER_LED, SFR_P0, 6); // USER LED -- on bottom of board
  25          
  26          #define ENC1_A  ((P0 & 0x20) ? 1 : 0)
  27          #define ENC1_B  ((P0 & 0x10) ? 1 : 0)
  28          #define ENC1_SW ((P0 & 0x08) ? 0 : 1)
  29          
  30          #define ENC2_A  ((P4 & 0x04) ? 1 : 0)
  31          #define ENC2_B  ((P4 & 0x08) ? 1 : 0)
  32          #define ENC2_SW ((P4 & 0x02) ? 0 : 1)
  33          
  34          #define ENC3_A  ((P2 & 0x01) ? 1 : 0)
  35          #define ENC3_B  ((P2 & 0x02) ? 1 : 0)
  36          #define ENC3_SW ((P1 & 0x80) ? 0 : 1)
  37          
  38          #define ENC4_A  ((P3 & 0x10) ? 1 : 0)
  39          #define ENC4_B  ((P3 & 0x20) ? 1 : 0)
  40          #define ENC4_SW ((P3 & 0x40) ? 0 : 1)
  41          
  42          #define ENC5_A  ((P2 & 0x10) ? 1 : 0)
  43          #define ENC5_B  ((P2 & 0x20) ? 1 : 0)
  44          #define ENC5_SW ((P2 & 0x40) ? 0 : 1)
  45          
  46          #define SW1     ((P3 & 0x80) ? 0 : 1)
C51 COMPILER V9.60.0.0   MAIN                                                              04/23/2021 07:39:26 PAGE 2   

  47          #define SW2     ((P4 & 0x01) ? 0 : 1)
  48          
  49          #define LED_ON  0
  50          #define LED_OFF 1
  51          
  52          #define SYSCLK       48000000      // SYSCLK frequency in Hz
  53          
  54          #define IRIS_CHANNEL          1
  55          #define FOCUS_CHANNEL         2
  56          #define AUTOFOCUS_CHANNEL     3
  57          #define GAIN_CHANNEL          5
  58          #define SHUTTER_CHANNEL       6
  59          #define WHITE_BALANCE_CHANNEL 7
  60          
  61          
  62          //-----------------------------------------------------------------------------------------------
  63          // typedefs
  64          //
  65          
  66          typedef uint8_t FSTOP_TABLE[25];
  67          
  68          
  69          //-----------------------------------------------------------------------------------------------
  70          // prototypes
  71          //
  72          
  73          void Timer2_Init (int counts);
  74          uint16_t lfsr (void);
  75          uint8_t GetDirection (uint8_t a, uint8_t b);
  76          uint8_t ProcessButton (uint8_t which, uint8_t sw);
  77          void ConvertServoChannelsToSbusData (void);
  78          
  79          
  80          //-----------------------------------------------------------------------------------------------
  81          // globals
  82          //
  83          
  84          SI_SEGMENT_VARIABLE(fstops, const FSTOP_TABLE, SI_SEG_CODE) = {
  85                  212, 205, 198, 191, 184,
  86                  177, 170, 163, 156, 149,
  87                  142, 135, 128, 121, 115,
  88                  107, 100,  93,  86,  80,
  89               73,  66,  60,  56,  44
  90          };
  91          
  92          // signals from ISRs to main loop
  93          volatile uint8_t flag250 = 0;
  94          
  95          // pseudo random lfsr state
  96          uint16_t lfsr_state = 0x0001;
  97          
  98          uint8_t enc1a;
  99          uint8_t enc1b;
 100          uint8_t enc2a;
 101          uint8_t enc2b;
 102          uint8_t enc3a;
 103          uint8_t enc3b;
 104          uint8_t enc4a;
 105          uint8_t enc4b;
 106          uint8_t enc5a;
 107          uint8_t enc5b;
 108          
 109          // local variables for making aUSB report
C51 COMPILER V9.60.0.0   MAIN                                                              04/23/2021 07:39:26 PAGE 3   

 110          uint8_t xdata reportNeeded;
 111          uint8_t xdata thisUsbReportData[6];
 112          uint8_t lastUsbReportData0 = 0;
 113          
 114          // variables used to communicate report to USB ISR
 115          volatile uint8_t xdata usbReportNeeded = false;
 116          volatile uint8_t xdata usbReportData[6];
 117          
 118          uint8_t xdata buttonStates[8];
 119          
 120          // camera parameters
 121          int8_t xdata balance;
 122          int8_t xdata gain;
 123          int8_t xdata shutter;
 124          uint8_t xdata iris;
 125          uint8_t xdata focus;
 126          
 127          // servo data sending phase
 128          uint8_t xdata servoPhase;
 129          
 130          // servo channels
 131          uint16_t xdata servoChannels[18];
 132          
 133          // sbus data
 134          uint8_t txByte;
 135          uint8_t xdata sbusData[25];
 136          
 137          
 138          //-----------------------------------------------------------------------------------------------
 139          // SiLabs_Startup() Routine
 140          //
 141          
 142          void SiLabs_Startup (void)
 143          {
 144   1        // Disable the watchdog here
 145   1      }
 146           
 147          
 148          //-----------------------------------------------------------------------------------------------
 149          // main() Routine
 150          //
 151          
 152          int16_t main(void)
 153          {
 154   1              uint8_t SFRPAGE_save;
 155   1              uint8_t led_timer = 0;
 156   1          uint8_t newUsbState = 0;
 157   1          uint8_t oldUsbState = 0;
 158   1          uint8_t i;
 159   1      
 160   1          // set default pin and peripheral configuration
 161   1          enter_DefaultMode_from_RESET();
 162   1      
 163   1              // Init Timer2 to generate interrupts at 250 Hz
 164   1              Timer2_Init (16000); // SYSCLK / 12 / 250
 165   1      
 166   1              // initialize encoder 3-bit states to prevent spurious up/down signals at startup
 167   1              enc1a = ENC1_A ? 7 : 0;
 168   1              enc1b = ENC1_B ? 7 : 0;
 169   1              enc2a = ENC2_A ? 7 : 0;
 170   1              enc2b = ENC2_B ? 7 : 0;
 171   1              enc3a = ENC3_A ? 7 : 0;
 172   1              enc3b = ENC3_B ? 7 : 0;
C51 COMPILER V9.60.0.0   MAIN                                                              04/23/2021 07:39:26 PAGE 4   

 173   1              enc4a = ENC4_A ? 7 : 0;
 174   1              enc4b = ENC4_B ? 7 : 0;
 175   1              enc5a = ENC5_A ? 7 : 0;
 176   1              enc5b = ENC5_B ? 7 : 0;
 177   1      
 178   1              // zero button states
 179   1              for (i = 0; i < 8; i++) {
 180   2                      buttonStates[i] = 0;
 181   2              }
 182   1      
 183   1              // turn off leds
 184   1              SW1_LED = LED_OFF;
 185   1              SW2_LED = LED_OFF;
 186   1      
 187   1              // initialize camera parameters
 188   1              balance = 0;
 189   1              gain = 0;
 190   1              shutter = 0;
 191   1              iris = 0;
 192   1              focus = 128;
 193   1      
 194   1              // initialize servo phase
 195   1              servoPhase = 0;
 196   1      
 197   1              // initialize servo channels
 198   1              for (i = 0; i < 18; i++) {
 199   2                      servoChannels[i] = 0x400;
 200   2              }
 201   1      
 202   1              // initialize sbus data
 203   1              for (i = 0; i < 25; i++) {
 204   2                      sbusData[i] = 0x00;
 205   2              }
 206   1      
 207   1              // loop forever
 208   1              while (1)
 209   1              {
 210   2                      // check if 100 Hz timer expired
 211   2                      if (flag250) {
 212   3                              flag250 = false;
 213   3      
 214   3                              // new USB state
 215   3                              newUsbState = USBD_GetUsbState ();
 216   3      
 217   3                              // blink LED based on USB state
 218   3                              if (newUsbState == USBD_STATE_CONFIGURED) {
 219   4                                      // run one led pattern for configured usb state
 220   4                                      if (led_timer < 25) {
 221   5                                              USER_LED = LED_ON; // LED ON
 222   5                                      } else if (led_timer < 50) {
 223   5                                              USER_LED = LED_OFF; // LED OFF
 224   5                                      } else if (led_timer < 75) {
 225   5                                              USER_LED = LED_ON; // LED ON
 226   5                                      } else if (led_timer < 100) {
 227   5                                              USER_LED = LED_OFF; // LED OFF
 228   5                                      }
 229   4      
 230   4                                      // tasks to run on entering configured state
 231   4                                      if (newUsbState != oldUsbState) {
 232   5                                              oldUsbState = newUsbState;
 233   5                                              // TODO
 234   5                                      }
 235   4                              } else {
C51 COMPILER V9.60.0.0   MAIN                                                              04/23/2021 07:39:26 PAGE 5   

 236   4                                      // and another for all other usb states
 237   4                                      if (led_timer < 50) {
 238   5                                              USER_LED = LED_ON; // LED ON
 239   5                                      } else {
 240   5                                              USER_LED = LED_OFF; // LED OFF
 241   5                                      }
 242   4      
 243   4                                      // tasks to run on leaving configured state
 244   4                                      if ((newUsbState != oldUsbState) && (oldUsbState == USBD_STATE_CONFIGURED)) {
 245   5                                              oldUsbState = newUsbState;
 246   5                                              // TODO
 247   5                                      }
 248   4                              }
 249   3      
 250   3                              // update led timer
 251   3                              if (++led_timer == 100) {
 252   4                                      led_timer = 0;
 253   4                              }
 254   3      
 255   3                              // sample encoders
 256   3                              enc1a = ((enc1a << 1) | ENC1_A) & 7;
 257   3                              enc1b = ((enc1b << 1) | ENC1_B) & 7;
 258   3                              enc2a = ((enc2a << 1) | ENC2_A) & 7;
 259   3                              enc2b = ((enc2b << 1) | ENC2_B) & 7;
 260   3                              enc3a = ((enc3a << 1) | ENC3_A) & 7;
 261   3                              enc3b = ((enc3b << 1) | ENC3_B) & 7;
 262   3                              enc4a = ((enc4a << 1) | ENC4_A) & 7;
 263   3                              enc4b = ((enc4b << 1) | ENC4_B) & 7;
 264   3                              enc5a = ((enc5a << 1) | ENC5_A) & 7;
 265   3                              enc5b = ((enc5b << 1) | ENC5_B) & 7;
 266   3      
 267   3                              // clear USB report data
 268   3                              for (i = 0; i < 6; i++) {
 269   4                                      thisUsbReportData[i] = 0;
 270   4                              }
 271   3      
 272   3                              // sample and process buttons
 273   3                              thisUsbReportData[0] |= ProcessButton (0, ENC1_SW);
 274   3                              thisUsbReportData[0] |= ProcessButton (1, ENC2_SW);
 275   3                              thisUsbReportData[0] |= ProcessButton (2, ENC3_SW);
 276   3                              thisUsbReportData[0] |= ProcessButton (3, ENC4_SW);
 277   3                              thisUsbReportData[0] |= ProcessButton (4, ENC5_SW);
 278   3                              thisUsbReportData[0] |= ProcessButton (5, SW1);
 279   3                              thisUsbReportData[0] |= ProcessButton (6, SW2);
 280   3      
 281   3                              // process encoders
 282   3                              thisUsbReportData[1] = GetDirection (enc1a, enc1b);
 283   3                              thisUsbReportData[2] = GetDirection (enc2a, enc2b);
 284   3                              thisUsbReportData[3] = GetDirection (enc3a, enc3b);
 285   3                              thisUsbReportData[4] = GetDirection (enc4a, enc4b);
 286   3                              thisUsbReportData[5] = GetDirection (enc5a, enc5b);
 287   3      
 288   3                              // check if report needed
 289   3                              reportNeeded = thisUsbReportData[1] | thisUsbReportData[2] | thisUsbReportData[3] | thisUsbReportData[4
             -] | thisUsbReportData[5] |
 290   3                                              (thisUsbReportData[0] != lastUsbReportData0);
 291   3      
 292   3                              // save key presses for the next time around
 293   3                              lastUsbReportData0 = thisUsbReportData[0];
 294   3      
 295   3                              // send report to IRQ-based USB code safely
 296   3                              if (reportNeeded) {
 297   4                                      SFRPAGE_save = SFRPAGE;
C51 COMPILER V9.60.0.0   MAIN                                                              04/23/2021 07:39:26 PAGE 6   

 298   4                                      USB_DisableInts ();
 299   4                                      SFRPAGE = SFRPAGE_save;
 300   4      
 301   4                                      usbReportNeeded = true;
 302   4                                      for (i = 0; i < 6; i++) {
 303   5                                              usbReportData[i] = thisUsbReportData[i];
 304   5                                      }
 305   4      
 306   4                                      SFRPAGE_save = SFRPAGE;
 307   4                                      USB_EnableInts ();
 308   4                                      SFRPAGE = SFRPAGE_save;
 309   4                              }
 310   3      
 311   3                              // white balance is controlled by encoder 1
 312   3                              if (thisUsbReportData[1] & 0x01) {
 313   4                                      balance++;
 314   4                              } else if (thisUsbReportData[1] & 0x02) {
 315   4                                      balance--;
 316   4                              }
 317   3      
 318   3                              // gain -- encoder 2
 319   3                              if (thisUsbReportData[2] & 0x01) {
 320   4                                      gain++;
 321   4                              } else if (thisUsbReportData[2] & 0x02) {
 322   4                                      gain--;
 323   4                              }
 324   3      
 325   3                              // shutter -- encoder 3
 326   3                              if (thisUsbReportData[3] & 0x01) {
 327   4                                      shutter++;
 328   4                              } else if (thisUsbReportData[3] & 0x02) {
 329   4                                      shutter--;
 330   4                              }
 331   3      
 332   3                              // iris -- encoder 4
 333   3                              if (thisUsbReportData[4] & 0x01) {
 334   4                                      if (iris < 24) iris++;
 335   4                              } else if (thisUsbReportData[4] & 0x02) {
 336   4                                      if (iris > 0) iris--;
 337   4                              }
 338   3      
 339   3                              // focus is controlled by encoder 5
 340   3                              if (thisUsbReportData[5] & 0x01) {
 341   4                                      // CW = focus farther away
 342   4                                      if (focus > 44) focus--;
 343   4                              } else if (thisUsbReportData[5] & 0x02) {
 344   4                                      // CCW = focus closer
 345   4                                      if (focus < 212) focus++;
 346   4                              }
 347   3      
 348   3                              // push to auto focus -- encoder 5 knob
 349   3                              // TODO
 350   3      
 351   3                              if (servoPhase == 0) {
 352   4                                      // convert user actions / camera parameters to servo channel data
 353   4      
 354   4                                      // white balance
 355   4                                      if (servoChannels[WHITE_BALANCE_CHANNEL] == 0x400) {
 356   5                                              if (balance > 0) {
 357   6                                                      balance--;
 358   6                                                      servoChannels[WHITE_BALANCE_CHANNEL] = 8*212; // stick up
 359   6                                              } else if (balance < 0) {
 360   6                                                      balance++;
C51 COMPILER V9.60.0.0   MAIN                                                              04/23/2021 07:39:26 PAGE 7   

 361   6                                                      servoChannels[WHITE_BALANCE_CHANNEL] = 8*44;  // stick down
 362   6                                              }
 363   5                                      } else {
 364   5                                              servoChannels[WHITE_BALANCE_CHANNEL] = 0x400;     // back to stick neutral
 365   5                                      }
 366   4      
 367   4                                      // gain
 368   4                                      if (servoChannels[GAIN_CHANNEL] == 0x400) {
 369   5                                              if (gain > 0) {
 370   6                                                      gain--;
 371   6                                                      servoChannels[GAIN_CHANNEL] = 8*212; // stick up
 372   6                                              } else if (gain < 0) {
 373   6                                                      gain++;
 374   6                                                      servoChannels[GAIN_CHANNEL] = 8*44;  // stick down
 375   6                                              }
 376   5                                      } else {
 377   5                                              servoChannels[GAIN_CHANNEL] = 0x400;     // back to stick neutral
 378   5                                      }
 379   4      
 380   4                                      // shutter
 381   4                                      if (servoChannels[SHUTTER_CHANNEL] == 0x400) {
 382   5                                              if (shutter > 0) {
 383   6                                                      shutter--;
 384   6                                                      servoChannels[SHUTTER_CHANNEL] = 8*212; // stick up
 385   6                                              } else if (shutter < 0) {
 386   6                                                      shutter++;
 387   6                                                      servoChannels[SHUTTER_CHANNEL] = 8*44;  // stick down
 388   6                                              }
 389   5                                      } else {
 390   5                                              servoChannels[SHUTTER_CHANNEL] = 0x400;     // back to stick neutral
 391   5                                      }
 392   4      
 393   4                                      // iris
 394   4                                      servoChannels[IRIS_CHANNEL] = fstops[iris] << 3;
 395   4      
 396   4                                      // focus
 397   4                                      servoChannels[FOCUS_CHANNEL] = focus << 3;
 398   4      
 399   4                              } else if (servoPhase == 1) {
 400   4                                      // convert servo channels to sbus data
 401   4                                      ConvertServoChannelsToSbusData ();
 402   4                              } else if (servoPhase == 2) {
 403   4                                      // send sbus data to camera
 404   4                                      txByte = 0;
 405   4                                      SCON1 |= SCON1_TI__BMASK;
 406   4                              }
 407   3      
 408   3                              if (++servoPhase >= 3) {
 409   4                                      servoPhase = 0;
 410   4                              }
 411   3      
 412   3                      } // end if (flag250)
 413   2              }
 414   1      }
 415          
 416          
 417          void Timer2_Init (int counts)
 418          {
 419   1         TMR2CN0 = 0x00;                     // Stop Timer2; Clear TF2;
 420   1                                             // use SYSCLK/12 as timebase
 421   1         CKCON0 &= ~0x60;                    // Timer2 clocked based on T2XCLK;
 422   1      
 423   1         TMR2RL = -counts;                   // Init reload values
C51 COMPILER V9.60.0.0   MAIN                                                              04/23/2021 07:39:26 PAGE 8   

 424   1         TMR2 = 0xffff;                      // Set to reload immediately
 425   1         IE_ET2 = 1;                         // Enable Timer2 interrupts
 426   1         TMR2CN0_TR2 = 1;                    // Start Timer2
 427   1      }
 428          
 429          
 430          SI_INTERRUPT(TIMER2_ISR, TIMER2_IRQn)
 431          {
 432   1          TMR2CN0_TF2H = 0;                   // Clear Timer2 interrupt flag
 433   1              flag250 = 1;
 434   1      }
 435          
 436          
 437          uint16_t lfsr (void)
 438          {
 439   1          uint16_t newbit;
 440   1      
 441   1          newbit = ((lfsr_state >> 0) ^ (lfsr_state >> 2) ^ (lfsr_state >> 3) ^ (lfsr_state >> 5)) /* & 1u */;
 442   1          lfsr_state = (lfsr_state >> 1) | (newbit << 15);
 443   1      
 444   1          return lfsr_state;
 445   1      }
 446          
 447          
 448          uint8_t GetDirection (uint8_t a, uint8_t b)
 449          {
 450   1              if (a == 4) {
 451   2                      // 100 => falling edge
 452   2                      return (b & 2) ? 0x01 : 0x02; // 0x01 = cw, 0x02 = ccw
 453   2              } else if (a == 3) {
 454   2                      // 011 => rising edge
 455   2                      return (b & 2) ? 0x02 : 0x01; // 0x02 = ccw, 0x01 = cw
 456   2              }
 457   1      
 458   1              return 0;
 459   1      }
 460          
 461          
 462          uint8_t ProcessButton (uint8_t which, uint8_t sw)
 463          {
 464   1              uint8_t state;
 465   1      
 466   1              state = buttonStates[which];
 467   1      
 468   1              switch (state) {
 469   2                      case 0: state = sw ? 1 : 0; break;
 470   2                      case 1: state = sw ? 2 : 0; break;
 471   2                      case 2: state = sw ? 2 : 3; break;
 472   2                      case 3: state = sw ? 2 : 0; break;
 473   2              }
 474   1      
 475   1              buttonStates[which] = state;
 476   1      
 477   1              return (state & 2) ? (1 << which) : 0;
 478   1      }
 479          
 480          
 481          void ConvertServoChannelsToSbusData (void)
 482          {
 483   1          uint8_t i, byte_in_sbus, bit_in_sbus, bit_in_servo, ch;
 484   1      
 485   1          // clear sbus data array
 486   1          for (i = 0; i < 25; i++)
C51 COMPILER V9.60.0.0   MAIN                                                              04/23/2021 07:39:26 PAGE 9   

 487   1          {
 488   2              sbusData[i] = 0;
 489   2          }
 490   1      
 491   1          // start code, flags, and end code
 492   1          sbusData[0] = 0x0F;
 493   1          sbusData[23] = 0x00;
 494   1          sbusData[24] = 0x00;
 495   1      
 496   1          //reset counters
 497   1          ch = 0;
 498   1          bit_in_servo = 0;
 499   1          byte_in_sbus = 1;
 500   1          bit_in_sbus = 0;
 501   1      
 502   1          for (i = 0; i < 176; i++)
 503   1          {
 504   2              if ((servoChannels[ch] & (1 << bit_in_servo)) != 0)
 505   2              {
 506   3                  sbusData[byte_in_sbus] |= (1 << bit_in_sbus);
 507   3              }
 508   2      
 509   2              bit_in_sbus++;
 510   2              bit_in_servo++;
 511   2      
 512   2              if (bit_in_sbus == 8)
 513   2              {
 514   3                  bit_in_sbus = 0;
 515   3                  byte_in_sbus++;
 516   3              }
 517   2      
 518   2              if (bit_in_servo == 11)
 519   2              {
 520   3                  bit_in_servo = 0;
 521   3                  ch++;
 522   3              }
 523   2          }
 524   1      }
 525          
 526          
 527          SI_INTERRUPT(UART1_ISR, UART1_IRQn)
 528          {
 529   1              if (SCON1 & SCON1_TI__BMASK) {
 530   2                      SCON1 &= ~SCON1_TI__BMASK;
 531   2                      if (txByte < 25) {
 532   3                              SBUF1 = sbusData[txByte++];
 533   3                      }
 534   2              }
 535   1      
 536   1              if (SCON1 & SCON1_RI__BMASK) {
 537   2                      SCON1 &= ~SCON1_RI__BMASK;
 538   2              }
 539   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2023    ----
   CONSTANT SIZE    =     25    ----
   XDATA SIZE       =     89    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     15       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
C51 COMPILER V9.60.0.0   MAIN                                                              04/23/2021 07:39:26 PAGE 10  

   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
