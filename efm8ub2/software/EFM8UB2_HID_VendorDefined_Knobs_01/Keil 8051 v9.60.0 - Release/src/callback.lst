C51 COMPILER V9.60.0.0   CALLBACK                                                          04/23/2021 07:39:25 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE CALLBACK
OBJECT MODULE PLACED IN .\src\callback.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\glen\Si
                    -mplicityStudio\v4_workspace\EFM8UB2_HID_VendorDefined_Knobs_01\src\callback.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) W
                    -ARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\glen\SimplicityStudio\v4_wor
                    -kspace\EFM8UB2_HID_VendorDefined_Knobs_01\inc;C:\Users\glen\SimplicityStudio\v4_workspace\EFM8UB2_HID_VendorDefined_Knob
                    -s_01\inc\config;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//kits/EFM8UB2_SLSTK2001A/config;C:/Silicon
                    -Labs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Lib/efm8_assert;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8
                    -051/v4.1.7//Lib/efm8_usb/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Device/EFM8UB2/peripheral_dr
                    -iver/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//kits/common/bsp;C:/SiliconLabs/SimplicityStudio/
                    -v4/developer/sdks/8051/v4.1.7//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//D
                    -evice/EFM8UB2/inc) REGFILE(EFM8UB2_HID_VendorDefined_Knobs_01.ORC) PRINT(.\src\callback.lst) COND PAGEWIDTH(120) PAGELEN
                    -GTH(65) OBJECT(.\src\callback.OBJ)

line level    source

   1          /**************************************************************************//**
   2           * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3           *
   4           * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5           *****************************************************************************/
   6          
   7          #include "SI_EFM8UB2_Register_Enums.h"
   8          #include "efm8_usb.h"
   9          #include "descriptors.h"
  10          #include "idle.h"
  11          #include "config.h"
  12          
  13          uint8_t tmpBuffer;
  14          uint8_t xdata txBuffer[64];
  15          uint8_t xdata rxBuffer[64];
  16          
  17          extern volatile uint8_t xdata usbReportNeeded;
  18          extern volatile uint8_t xdata usbReportData[6];
  19          
  20          SI_SBIT(SW1_LED,  SFR_P2, 3); // SW1 LED -- top button on top of board
  21          SI_SBIT(SW2_LED,  SFR_P2, 2); // SW2 LED -- bottom button on top of board
  22          SI_SBIT(USER_LED, SFR_P0, 6); // USER LED -- on bottom of board
  23          
  24          #define LED_ON  0
  25          #define LED_OFF 1
  26          
  27          
  28          // ----------------------------------------------------------------------------
  29          // Functions
  30          // ----------------------------------------------------------------------------
  31          void USBD_ResetCb(void)
  32          {
  33   1      
  34   1      }
  35          
  36          void USBD_SofCb(uint16_t sofNr)
  37          {
  38   1              UNREFERENCED_ARGUMENT(sofNr);
  39   1      
  40   1              idleTimerTick();
  41   1      
  42   1              // Check if the device should send a report
  43   1              if (isIdleTimerExpired() == true)
  44   1              {
  45   2                  if (USBD_EpIsBusy(EP1IN) == false) {
  46   3                      if (usbReportNeeded) {
C51 COMPILER V9.60.0.0   CALLBACK                                                          04/23/2021 07:39:25 PAGE 2   

  47   4                              usbReportNeeded = false;
  48   4                                  txBuffer[0] = 0x01;
  49   4                                  txBuffer[1] = usbReportData[0];
  50   4                                  txBuffer[2] = usbReportData[1];
  51   4                                  txBuffer[3] = usbReportData[2];
  52   4                                  txBuffer[4] = usbReportData[3];
  53   4                                  txBuffer[5] = usbReportData[4];
  54   4                                  txBuffer[6] = usbReportData[5];
  55   4                                      USBD_Write (EP1IN, txBuffer, 7, false);
  56   4                      }
  57   3                  }
  58   2              }
  59   1      }
  60          
  61          void USBD_DeviceStateChangeCb(USBD_State_TypeDef oldState,
  62                                        USBD_State_TypeDef newState)
  63          {
  64   1        // If not configured or in suspend, disable the LED
  65   1        if (newState < USBD_STATE_SUSPENDED)
  66   1        {
  67   2        }
  68   1        // Entering suspend mode, power internal and external blocks down
  69   1        else if (newState == USBD_STATE_SUSPENDED)
  70   1        {
  71   2          // Abort any pending transfer
  72   2          USBD_AbortTransfer(EP1IN);
  73   2        }
  74   1        else if (newState == USBD_STATE_CONFIGURED)
  75   1        {
  76   2                  idleTimerSet(POLL_RATE);
  77   2                      USBD_Read (EP1OUT, rxBuffer, 16, true);
  78   2        }
  79   1      
  80   1        // Exiting suspend mode, power internal and external blocks up
  81   1        if (oldState == USBD_STATE_SUSPENDED)
  82   1        {
  83   2        }
  84   1      }
  85          
  86          bool USBD_IsSelfPoweredCb(void)
  87          {
  88   1        return true;
  89   1      }
  90          
  91          USB_Status_TypeDef USBD_SetupCmdCb(SI_VARIABLE_SEGMENT_POINTER(
  94                                               setup,
  94                                               USB_Setup_TypeDef,
  94                                               MEM_MODEL_SEG))
  95          {
  96   1        USB_Status_TypeDef retVal = USB_STATUS_REQ_UNHANDLED;
  97   1      
  98   1        if ((setup->bmRequestType.Type == USB_SETUP_TYPE_STANDARD)
  99   1            && (setup->bmRequestType.Direction == USB_SETUP_DIR_IN)
 100   1            && (setup->bmRequestType.Recipient == USB_SETUP_RECIPIENT_INTERFACE))
 101   1        {
 102   2          // A HID device must extend the standard GET_DESCRIPTOR command
 103   2          // with support for HID descriptors.
 104   2          switch (setup->bRequest)
 105   2          {
 106   3            case GET_DESCRIPTOR:
 107   3              if ((setup->wValue >> 8) == USB_HID_REPORT_DESCRIPTOR)
 108   3              {
 109   4                switch (setup->wIndex)
C51 COMPILER V9.60.0.0   CALLBACK                                                          04/23/2021 07:39:25 PAGE 3   

 110   4                {
 111   5                  case 0: // Interface 0
 112   5      
 113   5                    USBD_Write(EP0,
 114   5                               (SI_VARIABLE_SEGMENT_POINTER(, uint8_t, SI_SEG_GENERIC))ReportDescriptor0,
 115   5                               EFM8_MIN(sizeof(ReportDescriptor0), setup->wLength),
 116   5                               false);
 117   5                    retVal = USB_STATUS_OK;
 118   5                    break;
 119   5      
 120   5                  default: // Unhandled Interface
 121   5                    break;
 122   5                }
 123   4              }
 124   3              else if ((setup->wValue >> 8) == USB_HID_DESCRIPTOR)
 125   3              {
 126   4                switch (setup->wIndex)
 127   4                {
 128   5                  case 0: // Interface 0
 129   5      
 130   5                    USBD_Write(EP0,
 131   5                               (SI_VARIABLE_SEGMENT_POINTER(, uint8_t, SI_SEG_GENERIC))(&configDesc[18]),
 132   5                               EFM8_MIN(USB_HID_DESCSIZE, setup->wLength),
 133   5                               false);
 134   5                    retVal = USB_STATUS_OK;
 135   5                    break;
 136   5      
 137   5                  default: // Unhandled Interface
 138   5                    break;
 139   5                }
 140   4              }
 141   3              break;
 142   3          }
 143   2        }
 144   1        else if ((setup->bmRequestType.Type == USB_SETUP_TYPE_CLASS)
 145   1                 && (setup->bmRequestType.Recipient == USB_SETUP_RECIPIENT_INTERFACE)
 146   1                 && (setup->wIndex == HID_VENDOR_IFC))
 147   1        {
 148   2          // Implement the necessary HID class specific commands.
 149   2          switch (setup->bRequest)
 150   2          {
 151   3            case USB_HID_SET_IDLE:
 152   3              if (((setup->wValue & 0xFF) == 0)             // Report ID
 153   3                  && (setup->wLength == 0)
 154   3                  && (setup->bmRequestType.Direction != USB_SETUP_DIR_IN))
 155   3              {
 156   4                idleTimerSet(setup->wValue >> 8);
 157   4                retVal = USB_STATUS_OK;
 158   4              }
 159   3              break;
 160   3      
 161   3            case USB_HID_GET_IDLE:
 162   3              if ((setup->wValue == 0)                      // Report ID
 163   3                  && (setup->wLength == 1)
 164   3                  && (setup->bmRequestType.Direction == USB_SETUP_DIR_IN))
 165   3              {
 166   4                tmpBuffer = idleGetRate();
 167   4                USBD_Write(EP0, &tmpBuffer, 1, false);
 168   4                retVal = USB_STATUS_OK;
 169   4              }
 170   3              break;
 171   3          }
 172   2        }
C51 COMPILER V9.60.0.0   CALLBACK                                                          04/23/2021 07:39:25 PAGE 4   

 173   1      
 174   1        return retVal;
 175   1      }
 176          
 177          uint16_t USBD_XferCompleteCb(uint8_t epAddr,
 178                                       USB_Status_TypeDef status,
 179                                       uint16_t xferred,
 180                                       uint16_t remaining)
 181          {
 182   1              UNREFERENCED_ARGUMENT(status);
 183   1              UNREFERENCED_ARGUMENT(xferred);
 184   1              UNREFERENCED_ARGUMENT(remaining);
 185   1      
 186   1              if (epAddr == EP1OUT) {
 187   2                      if (rxBuffer[0] == 0x02) {
 188   3                              if (rxBuffer[1] & 0x01) SW1_LED = LED_ON; else SW1_LED = LED_OFF;
 189   3                              if (rxBuffer[1] & 0x02) SW2_LED = LED_ON; else SW2_LED = LED_OFF;
 190   3                      }
 191   2                      USBD_Read (EP1OUT, rxBuffer, 16, true);
 192   2              }
 193   1      
 194   1              return 0;
 195   1      }
 196          
 197          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    573    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    128    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1      12
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
